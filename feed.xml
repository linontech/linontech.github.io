<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 21 Nov 2021 03:26:01 +0000</pubDate>
    <lastBuildDate>Sun, 21 Nov 2021 03:26:01 +0000</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>踩坑 Azure TFS 部署使用者定義參數</title>
        <description>&lt;h3 id=&quot;前情提要&quot;&gt;前情提要&lt;/h3&gt;

&lt;p&gt;最近在角落研究微軟 Azure TFS 的 Release Pipeline 的參數傳遞的部分，Windows 的 Server 的 Release Pipeline 要讀取部署
Pipeline 上設置的環境變數，到 Linux Server 上面的 shell 做使用。每次覺得 code review 都一切 Look Very Good to
me 的時候，總是會有未知的彩蛋。在 Azure TFS 上設置的環境參數名稱，原本小寫的部分被轉成了大寫，不止如此參數名稱如果原本有帶 dot
的，也轉換成了底線。&lt;/p&gt;

&lt;h3 id=&quot;tfs-release-pipeline-參數名稱命名規範&quot;&gt;TFS Release Pipeline 參數名稱命名規範&lt;/h3&gt;

&lt;p&gt;因為需要把Azure TFS上設置的環境變量，直接帶到 Linux Server 上使用，不想一個一個參數的傳進 shell 檔裡面，參數多的時候真的會覺得
懷疑人生，所以稍微看了一下 Azure Pipeline 的使用者定義參數使用方式。
如果你也想讀英文，這是參考的&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&amp;amp;tabs=yaml%2Cbatch&amp;amp;WT.mc_id=DT-MVP-4015686#variable-naming-restrictions&quot;&gt;連結&lt;/a&gt;。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Macro Syntax Variables&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-angular2html&quot;&gt;# 注意這邊是括號不是大括號
echo $(my_variable)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Template Expression Variables&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;範本參數，顧名思義會在編譯的時候就把參數做替換。一般來說，這個參數表達方式，會用在複用部署 YAML 檔的某一部分，並傳遞進去相應的參數。
當發現無法替換的參數，會直接替換成空字串。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Runtime Expression Variables&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一般來說，這個參數表達方式，會用在條件式判斷去執行不同 Task 的時候。另外，它也只會在作為值的時候被使用，無法作為key值做使用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-angular2html&quot;&gt;$[variables.key] : value # invalid
key : $[variables.value] # valid
key : $[variables.value]foo # invalid
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;release-pipeline-inline-script-命令行指令的保護措施&quot;&gt;Release Pipeline inline script 命令行指令的保護措施&lt;/h3&gt;

&lt;p&gt;當執行某些重要的指令，比如，登入會使用到的帳號密碼作為參數是不可缺少的部分，如果其中作為密碼的參數不見，很有可能會導致整個 Server 上因為 key 錯
密碼而發生災難。又或者是，在部署期間需要把某個路徑中的文件刪除。如果這個路徑使用環境參數拼出來的話，就會需要特別注意了。一個處理方式是，利用下面的 linux 條件
判斷式，排除某些重要參數為空值的情況。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/to/your/app+x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Parameter Error!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者也有微軟 powershell 的寫法可以參考，&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;PUSH_ACCOUNT&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-And&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;PUSH_PASSWORD&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# some very important command you want to execute&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  Write-Host &lt;span class=&quot;s2&quot;&gt;&quot;Fatal. Missing Necessary Parameter&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
        <link>/%E6%8A%80%E8%A1%93/2021/11/17/%E8%B8%A9%E5%9D%91-Azure-TFS-%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8%E8%80%85%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%8F%83%E6%95%B8.html</link>
        <guid isPermaLink="true">/%E6%8A%80%E8%A1%93/2021/11/17/%E8%B8%A9%E5%9D%91-Azure-TFS-%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8%E8%80%85%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%8F%83%E6%95%B8.html</guid>
        
        
        <category>技術</category>
        
      </item>
    
      <item>
        <title>ELK 監控串流 + Spark Structured Streaming</title>
        <description>&lt;p&gt;之前的做法是，串流數據ETL的結果，寫到Kafka的同時也寫一份到ElasticSearch，這樣就可以在Kibana上面分析串流ETL的效能，但是這樣需要記錄串流數據每一段
的時間戳，才能分析各段即時ETL的耗時。如果系統比較複雜，ETL數據串到最後會有一坨喇股的時間戳，只為了後面的Kibana分析使用。對中間的串流ETL而言都會是多餘的
資源消耗。&lt;/p&gt;

&lt;p&gt;目前讓 logstash 收集各段串流ETL的Kafka topic中的資料，並記錄 CreateTime。再根據event_id在 logstash 進行聚合，
就能計算出平均一筆event，整個串流ETL pipeline所需要的時間。上述是比較細的計算方式，如果只需要簡單的知道每段串流ETL
的效能，也可以只計算TPS(Transaction per seconds)，就是這段pipeline平均每秒處理了多少資料。&lt;/p&gt;

&lt;p&gt;TPS不能真的反應即時串流ETL延遲的情況，也可以理解為一個batch所需要的最小的時間，會是這個即時ETL的最低延遲。
如下說明，如果ETL串流的 Input Rate和Process Rate能保持差不多的速度，表示串流的處理資源足夠。但是，還是會有
因為一個 batch處理了太多的數據，而發生高延遲。解決的方法，是在縮小每個batch的大小和增加更多平行計算的資源，比如更多的
之間 Kafka partitions 或者更多的 Spark CPU core，之間找到平衡點。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spark Structured Streaming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Spark Structured Streaming 是一個分佈式即時串流數據處理框架。他使用了 Spark 的 SQL/DataSet/DataFrame API，
開發的人可以輕鬆的實現即時數據的聚合操作和 join 操作，還有窗口化 windowing。&lt;/p&gt;

&lt;p&gt;此外 Spark 3.0 開始，Structured Streaming 提供了一個監控串流ETL的監控 UI。可以清楚地看到，ETL串流的 Input Rate，
Process Rate 等。&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
        <link>/%E6%8A%80%E8%A1%93/2021/11/12/ELK-%E7%9B%A3%E6%8E%A7%E4%B8%B2%E6%B5%81%E6%95%B8%E6%93%9A.html</link>
        <guid isPermaLink="true">/%E6%8A%80%E8%A1%93/2021/11/12/ELK-%E7%9B%A3%E6%8E%A7%E4%B8%B2%E6%B5%81%E6%95%B8%E6%93%9A.html</guid>
        
        
        <category>技術</category>
        
      </item>
    
      <item>
        <title>關於提升覺察力，真正接納自我</title>
        <description>&lt;p&gt;好吧，簡單來說上面標題的更白話一點的意思應該是，”慢慢卸下面具，放下想象中的模樣，開始與真正的自己連結。”&lt;/p&gt;

&lt;p&gt;進入職場、大人的世界之後，每天總是會為了迎合他人，而假裝地嘴角上揚，原本你自在的心還會一次次的提醒自己，”你好像已經很久沒有發自內心的笑了”。
直到假裝和表面變成反射動作，你開始對自己不包容、不開放，開始自我批判，下意識地與同儕比較和競爭，怕所有人背著你學習，怕自己不夠好、不夠厲害，甚至害怕
自己沒有別人想像中的那般厲害，於是不自信的思維從心底油然而生，最後誰也無法看清你是誰。接納自我：&lt;/p&gt;

&lt;p&gt;第一步，停止道歉和自我批判。最近工作上和同事聊到想在工作上”做自己”，而不是工作中總是在在”服務他人”，當然如果你從事的是服務業好像就是另當別論。
盤點下來，”做自己”的例子比如，大聲區分工作權責，或者大聲說自己真的想做什麼，而不是不帶感情的完成一件待辦事項。當然這和你富有熱情、熱忱地，想要幫忙解決問題的
情況是完全不同的。熱忱如果不是出自真正接納自己恐會是淪為三分鐘熱度，又或者只是你的其中一個面具。&lt;/p&gt;

&lt;p&gt;第二步，回想自信時刻。自信和自負的區別，打個比方來說就是，你抬起的是下巴還是鼻子，就是你能否接受來自他人的意見或批評。
避免自己在嘗試做自己的時候，迷失方向，看不到其他人，而逃避了其他人，最後在自我逃避。&lt;/p&gt;

&lt;p&gt;第三步，採取行動。找到自己最自在的那個時候，從那開始跨出舒適圈，讓自己去挑戰或爭取心中渴望已久的事物，並將實踐的過程與理想的成果形象化。
清楚地找到自己的目標。&lt;/p&gt;

&lt;p&gt;覺察力，讓你更了解自己，也更容易接納他人，更能夠與他人連結。&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
        <link>/%E7%94%9F%E6%B4%BB/2021/11/09/%E9%97%9C%E6%96%BC%E6%8F%90%E5%8D%87%E8%A6%BA%E5%AF%9F%E5%8A%9B-%E7%9C%9F%E6%AD%A3%E6%8E%A5%E7%B4%8D%E8%87%AA%E6%88%91.html</link>
        <guid isPermaLink="true">/%E7%94%9F%E6%B4%BB/2021/11/09/%E9%97%9C%E6%96%BC%E6%8F%90%E5%8D%87%E8%A6%BA%E5%AF%9F%E5%8A%9B-%E7%9C%9F%E6%AD%A3%E6%8E%A5%E7%B4%8D%E8%87%AA%E6%88%91.html</guid>
        
        
        <category>生活</category>
        
      </item>
    
      <item>
        <title>Resume</title>
        <description>&lt;p&gt;擺脫，想的比做的多。實踐力不足，求生慾低。生活感。&lt;/p&gt;

&lt;p&gt;林子暐  資料工程師&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;熟悉 Hadoop, Cloudera Distributed Hadoop, Spark,&lt;/li&gt;
  &lt;li&gt;熟悉 Python, Java&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;客戶歷程即時資料流開發及效能監控&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Spark Structured Streaming串接前端kafka資料&lt;/li&gt;
  &lt;li&gt;Kafka Connect 串接 Oracle資料&lt;/li&gt;
  &lt;li&gt;ELK監控機制開發&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spark ETL程式開發&lt;/p&gt;

&lt;p&gt;Side Project&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;AWS 591 news crawler&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
        <link>/2021/11/06/First-Post.html</link>
        <guid isPermaLink="true">/2021/11/06/First-Post.html</guid>
        
        
      </item>
    
      <item>
        <title>ELK 小白記錄</title>
        <description>&lt;p&gt;ELK是ElasticSearch， Logstash， Kibana三個名詞合在一起的縮寫。 通常用於日誌管理，從集群中的多個service收集日誌，避免開發者直接登入server，
使得生產環境的安全和查找問題的便利性。&lt;/p&gt;

&lt;p&gt;其中，ElasticSearch提供日誌保存，檢索和分析的功能，基於 Apache 
Lucene 真的就是未名覺厲。Logstash收集log並做一些前處理，除了將一些常用的反序列數據的功能變得很好上手，如常見的json，csv。更強大的是， 
grok， dissect 等插件，將非結構化的字符串轉換成結構化的數據， 當然也可以添加或刪除欄位 add_field， 
remove_field。Kibana 則提供資料視覺化的dashboard，直觀的 Kibana Query Language，讓使用者可以更快知道資料的全貌。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Beat and Logstash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beats 是一個小型的日誌發送程序的集合，大家最常使用的就是 Filebeat，它能夠將日誌發送到 ELK 集群。除此之外，Beat家族還包括 Packetbeat, 
Metricbeat，Heartbeat，Functionbeat … 等。一般在將日誌文件導入到ElasticSearch進行檢索時，會同時使用 
Filebeat和Logstash，Filebeat負責將服務器上的日誌發送到ELK集群，Logstash則負責將日誌數據轉換成我們需要的格式。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ElasticSearch 和 MongoDB一樣都是NoSQL的資料庫，所有的資料都以JSON格式讀取。不同於傳統的關係型資料庫，文檔和文檔之間的關係會使用 
join來串接，ElasticSearch 通常會用使用sub document的方式。 此外，ElasticSearch 對所有欄位都可以建立索引，並且可以根據不同的用途建立索引。&lt;/p&gt;

</description>
        <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
        <link>/%E6%8A%80%E8%A1%93/2021/11/06/ELK-%E5%B0%8F%E7%99%BD%E8%A8%98%E9%8C%84.html</link>
        <guid isPermaLink="true">/%E6%8A%80%E8%A1%93/2021/11/06/ELK-%E5%B0%8F%E7%99%BD%E8%A8%98%E9%8C%84.html</guid>
        
        
        <category>技術</category>
        
      </item>
    
  </channel>
</rss>
